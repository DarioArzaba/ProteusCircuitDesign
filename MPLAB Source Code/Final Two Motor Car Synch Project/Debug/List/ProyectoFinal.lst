
AVRASM ver. 2.1.30  C:\Users\PRN14097\Desktop\Micros\TAREAS\28 PROYECTO FINAL\Debug\List\ProyectoFinal.asm Sun Feb 05 18:48:01 2023

                 
                 
                 ;CodeVisionAVR C Compiler V3.34 Evaluation
                 ;(C) Copyright 1998-2018 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : long, width
                 ;(s)scanf features      : long, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: Off
                 ;Smart register allocation: Off
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0086 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _0x3:
000034 0303
000035 0203
000036 0c02
000037 0800      	.DB  0x3,0x3,0x3,0x2,0x2,0xC,0x0,0x8
000038 0100
000039 0600      	.DB  0x0,0x1,0x0,0x6
                 _0x22:
00003a 0507
00003b 1607
00003c 1e1f
00003d 040e      	.DB  0x7,0x5,0x7,0x16,0x1F,0x1E,0xE,0x4
                 _0x23:
00003e 0507
00003f 1607
000040 1e1f
000041 020e      	.DB  0x7,0x5,0x7,0x16,0x1F,0x1E,0xE,0x2
                 _0x24:
000042 0000
000043 0504
000044 1615
000045 040c      	.DB  0x0,0x0,0x4,0x5,0x15,0x16,0xC,0x4
                 _0x25:
000046 0400
000047 1505
000048 1c16
000049 0404      	.DB  0x0,0x4,0x5,0x15,0x16,0x1C,0x4,0x4
                 _0x26:
00004a 2020
00004b 2020
00004c 2020
00004d 5320      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x53
00004e 6f63
00004f 6572
000050 203a
000051 2020      	.DB  0x63,0x6F,0x72,0x65,0x3A,0x20,0x20,0x20
000052 0020
000053 2020
000054 2020
000055 2020      	.DB  0x20,0x0,0x20,0x20,0x20,0x20,0x20,0x20
000056 2020
000057 2020
000058 2020
000059 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
                 _0x0:
00005a 2020
00005b 2020
00005c 4147
00005d 414e      	.DB  0x20,0x20,0x20,0x20,0x47,0x41,0x4E,0x41
00005e 5453
00005f 2045
000060 2000
000061 5020      	.DB  0x53,0x54,0x45,0x20,0x0,0x20,0x20,0x50
000062 5245
000063 4944
000064 5453
000065 2045      	.DB  0x45,0x52,0x44,0x49,0x53,0x54,0x45,0x20
000066 0020
000067 3a53
000068 6925
000069 2020      	.DB  0x20,0x0,0x53,0x3A,0x25,0x69,0x20,0x20
00006a 5348
00006b 253a
00006c 0069      	.DB  0x48,0x53,0x3A,0x25,0x69,0x0
                 _0x2020060:
C:\Users\PRN14097\Desktop\Micros\TAREAS\28 PROYECTO FINAL\Debug\List\ProyectoFinal.asm(1156): warning: .cseg .db misalignment - padding zero byte
00006d 0001      	.DB  0x1
                 _0x2020000:
00006e 4e2d
00006f 4e41
000070 4900
000071 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\PRN14097\Desktop\Micros\TAREAS\28 PROYECTO FINAL\Debug\List\ProyectoFinal.asm(1159): warning: .cseg .db misalignment - padding zero byte
000072 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000073 0008      	.DW  0x08
000074 031e      	.DW  _dino_l
000075 0074      	.DW  _0x22*2
                 
000076 0008      	.DW  0x08
000077 0326      	.DW  _dino_r
000078 007c      	.DW  _0x23*2
                 
000079 0008      	.DW  0x08
00007a 032e      	.DW  _cactus_small
00007b 0084      	.DW  _0x24*2
                 
00007c 0008      	.DW  0x08
00007d 0336      	.DW  _cactus_big
00007e 008c      	.DW  _0x25*2
                 
00007f 0020      	.DW  0x20
000080 033e      	.DW  _world
000081 0094      	.DW  _0x26*2
                 
000082 0001      	.DW  0x01
000083 035e      	.DW  __seed_G101
000084 00da      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000085 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000086 94f8      	CLI
000087 27ee      	CLR  R30
000088 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000089 e0f1      	LDI  R31,1
00008a bff5      	OUT  MCUCR,R31
00008b bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00008c e08d      	LDI  R24,(14-2)+1
00008d e0a2      	LDI  R26,2
00008e 27bb      	CLR  R27
                 __CLEAR_REG:
00008f 93ed      	ST   X+,R30
000090 958a      	DEC  R24
000091 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000092 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000093 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000094 e0a0      	LDI  R26,LOW(__SRAM_START)
000095 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000096 93ed      	ST   X+,R30
000097 9701      	SBIW R24,1
000098 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000099 eee6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00009a e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00009b 9185      	LPM  R24,Z+
00009c 9195      	LPM  R25,Z+
00009d 9700      	SBIW R24,0
00009e f061      	BREQ __GLOBAL_INI_END
00009f 91a5      	LPM  R26,Z+
0000a0 91b5      	LPM  R27,Z+
0000a1 9005      	LPM  R0,Z+
0000a2 9015      	LPM  R1,Z+
0000a3 01bf      	MOVW R22,R30
0000a4 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000a5 9005      	LPM  R0,Z+
0000a6 920d      	ST   X+,R0
0000a7 9701      	SBIW R24,1
0000a8 f7e1      	BRNE __GLOBAL_INI_LOOP
0000a9 01fb      	MOVW R30,R22
0000aa cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
0000ab e0e0      	LDI  R30,__GPIOR0_INIT
0000ac bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000ad efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000ae bfed      	OUT  SPL,R30
0000af e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000b0 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000b1 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000b2 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000b3 940c 0273 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;#asm
                     .equ __lcd_port=0x0B
                     .equ __lcd_EN=3
                     .equ __lcd_RS=2
                     .equ __lcd_D4=4
                     .equ __lcd_D5=5
                     .equ __lcd_D6=6
                     .equ __lcd_D7=7
                 ; 0000 0009 #endasm
                 ;#include <mega328p.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <delay.h>
                 ;#include <display.h>
                 
                 	.CSEG
                 _SetupLCD:
                 ; .FSTART _SetupLCD
0000b5 972c      	SBIW R28,12
0000b6 e08c      	LDI  R24,12
                +
0000b7 e060     +LDI R22 , LOW ( 0 )
0000b8 e070     +LDI R23 , HIGH ( 0 )
                 	__GETWRN 22,23,0
0000b9 e6e8      	LDI  R30,LOW(_0x3*2)
0000ba e0f0      	LDI  R31,HIGH(_0x3*2)
0000bb d4f7      	RCALL __INITLOCB
0000bc 930a      	ST   -Y,R16
                 ;	TableSetup -> Y+1
                 ;	i -> R16
                 ; 0000 000C     SBI __lcd_port-1,__lcd_EN
0000bd 9a53          SBI __lcd_port-1,__lcd_EN
0000be 9a52          SBI __lcd_port-1,__lcd_RS
0000bf 9a54          SBI __lcd_port-1,__lcd_D4
0000c0 9a55          SBI __lcd_port-1,__lcd_D5
0000c1 9a56          SBI __lcd_port-1,__lcd_D6
0000c2 9a57          SBI __lcd_port-1,__lcd_D7
0000c3 e3a2      	LDI  R26,LOW(50)
0000c4 e0b0      	LDI  R27,0
0000c5 d58e      	RCALL _delay_ms
0000c6 e000      	LDI  R16,LOW(0)
                 _0x5:
0000c7 300c      	CPI  R16,12
0000c8 f470      	BRSH _0x6
0000c9 e0a2      	LDI  R26,LOW(2)
0000ca e0b0      	LDI  R27,0
0000cb d588      	RCALL _delay_ms
0000cc 2fe0      	MOV  R30,R16
0000cd e0f0      	LDI  R31,0
0000ce 01de      	MOVW R26,R28
0000cf 9611      	ADIW R26,1
0000d0 0fae      	ADD  R26,R30
0000d1 1fbf      	ADC  R27,R31
0000d2 91ac      	LD   R26,X
0000d3 d00f      	RCALL _SendDataBitsLCD
0000d4 d00b      	RCALL _PulseEn
0000d5 5f0f      	SUBI R16,-1
0000d6 cff0      	RJMP _0x5
                 _0x6:
0000d7 e0ec      	LDI  R30,LOW(12)
0000d8 93e0 0300 	STS  _cursor,R30
0000da 91a0 0300 	LDS  R26,_cursor
0000dc d01e      	RCALL _WriteComandLCD
0000dd 8108      	LDD  R16,Y+0
0000de 962d      	ADIW R28,13
0000df 9508      	RET
                 ; .FEND
                 _PulseEn:
                 ; .FSTART _PulseEn
0000e0 9a5b          SBI __lcd_port,__lcd_EN  // EN=1;
0000e1 985b          CBI __lcd_port,__lcd_EN // EN=0;
0000e2 9508      	RET
                 ; .FEND
                 _SendDataBitsLCD:
                 ; .FSTART _SendDataBitsLCD
0000e3 930a      	ST   -Y,R16
0000e4 2f0a      	MOV  R16,R26
                 ;	dato -> R16
0000e5 ff03      	SBRS R16,3
0000e6 c002      	RJMP _0x7
0000e7 9a5f      	SBI __lcd_port,__lcd_D7
0000e8 c001      	RJMP _0x8
                 _0x7:
0000e9 985f      	CBI __lcd_port,__lcd_D7
                 _0x8:
0000ea ff02      	SBRS R16,2
0000eb c002      	RJMP _0x9
0000ec 9a5e      	SBI __lcd_port,__lcd_D6
0000ed c001      	RJMP _0xA
                 _0x9:
0000ee 985e      	CBI __lcd_port,__lcd_D6
                 _0xA:
0000ef ff01      	SBRS R16,1
0000f0 c002      	RJMP _0xB
0000f1 9a5d      	SBI __lcd_port,__lcd_D5
0000f2 c001      	RJMP _0xC
                 _0xB:
0000f3 985d      	CBI __lcd_port,__lcd_D5
                 _0xC:
0000f4 ff00      	SBRS R16,0
0000f5 c002      	RJMP _0xD
0000f6 9a5c      	SBI __lcd_port,__lcd_D4
0000f7 c001      	RJMP _0xE
                 _0xD:
0000f8 985c      	CBI __lcd_port,__lcd_D4
                 _0xE:
0000f9 9109      	LD   R16,Y+
0000fa 9508      	RET
                 ; .FEND
                 _WriteComandLCD:
                 ; .FSTART _WriteComandLCD
0000fb 931a      	ST   -Y,R17
0000fc 930a      	ST   -Y,R16
0000fd 2f1a      	MOV  R17,R26
                 ;	Comando -> R17
                 ;	tempComando -> R16
0000fe 985a      	CBI __lcd_port,__lcd_RS
0000ff d3b5      	RCALL SUBOPT_0x0
000100 940c 0484 	JMP  _0x20A0001
                 ; .FEND
                 _CharLCD:
                 ; .FSTART _CharLCD
000102 931a      	ST   -Y,R17
000103 930a      	ST   -Y,R16
000104 2f1a      	MOV  R17,R26
                 ;	dato -> R17
                 ;	tempdato -> R16
000105 9a5a      	SBI __lcd_port,__lcd_RS
000106 d3ae      	RCALL SUBOPT_0x0
000107 940c 0484 	JMP  _0x20A0001
                 ; .FEND
                 _StringLCD:
                 ; .FSTART _StringLCD
000109 d3bf      	RCALL SUBOPT_0x1
                 ;	Mensaje -> R17,R18
                 ;	i -> R16
                 _0x10:
00010a d3c3      	RCALL SUBOPT_0x2
00010b 91a4      	LPM  R26,Z
00010c dff5      	RCALL _CharLCD
00010d 2fe0      	MOV  R30,R16
00010e e0f0      	LDI  R31,0
00010f 0fe1      	ADD  R30,R17
000110 1ff2      	ADC  R31,R18
000111 91e4      	LPM  R30,Z
000112 30e0      	CPI  R30,0
000113 f7b1      	BRNE _0x10
000114 d49a      	RCALL __LOADLOCR3
000115 c02f      	RJMP _0x20A0003
                 ; .FEND
                 ;	Mensaje -> R19,R20
                 ;	tiempo -> R17,R18
                 ;	i -> R16
                 _StringLCDVar:
                 ; .FSTART _StringLCDVar
000116 d3b2      	RCALL SUBOPT_0x1
                 ;	Mensaje -> R17,R18
                 ;	i -> R16
                 _0x16:
000117 d3b6      	RCALL SUBOPT_0x2
000118 81a0      	LD   R26,Z
000119 dfe8      	RCALL _CharLCD
00011a d3b9      	RCALL SUBOPT_0x3
00011b 91ec      	LD   R30,X
00011c 30e0      	CPI  R30,0
00011d f7c9      	BRNE _0x16
00011e d490      	RCALL __LOADLOCR3
00011f c025      	RJMP _0x20A0003
                 ; .FEND
                 _EraseLCD:
                 ; .FSTART _EraseLCD
000120 e0a1      	LDI  R26,LOW(1)
000121 dfd9      	RCALL _WriteComandLCD
000122 9508      	RET
                 ; .FEND
                 _MoveCursor:
                 ; .FSTART _MoveCursor
000123 931a      	ST   -Y,R17
000124 930a      	ST   -Y,R16
000125 2f0a      	MOV  R16,R26
000126 811a      	LDD  R17,Y+2
                 ;	x -> R17
                 ;	y -> R16
000127 2fe0      	MOV  R30,R16
000128 e0f0      	LDI  R31,0
000129 9730      	SBIW R30,0
00012a f419      	BRNE _0x1B
00012b 2fa1      	MOV  R26,R17
00012c 58a0      	SUBI R26,-LOW(128)
00012d c014      	RJMP _0x6E
                 _0x1B:
00012e 30e1      	CPI  R30,LOW(0x1)
00012f e0a0      	LDI  R26,HIGH(0x1)
000130 07fa      	CPC  R31,R26
000131 f419      	BRNE _0x1C
000132 2fa1      	MOV  R26,R17
000133 54a0      	SUBI R26,-LOW(192)
000134 c00d      	RJMP _0x6E
                 _0x1C:
000135 30e2      	CPI  R30,LOW(0x2)
000136 e0a0      	LDI  R26,HIGH(0x2)
000137 07fa      	CPC  R31,R26
000138 f419      	BRNE _0x1D
000139 2fa1      	MOV  R26,R17
00013a 56ac      	SUBI R26,-LOW(148)
00013b c006      	RJMP _0x6E
                 _0x1D:
00013c 30e3      	CPI  R30,LOW(0x3)
00013d e0a0      	LDI  R26,HIGH(0x3)
00013e 07fa      	CPC  R31,R26
00013f f419      	BRNE _0x1A
000140 2fa1      	MOV  R26,R17
000141 52ac      	SUBI R26,-LOW(212)
                 _0x6E:
000142 dfb8      	RCALL _WriteComandLCD
                 _0x1A:
000143 8119      	LDD  R17,Y+1
000144 8108      	LDD  R16,Y+0
                 _0x20A0003:
000145 9623      	ADIW R28,3
000146 9508      	RET
                 ; .FEND
                 _CreateChar:
                 ; .FSTART _CreateChar
000147 d45f      	RCALL __SAVELOCR4
                +
000148 2f1a     +MOV R17 , R26
000149 2f2b     +MOV R18 , R27
                 	__PUTW2R 17,18
00014a 813c      	LDD  R19,Y+4
                 ;	NoCaracter -> R19
                 ;	datos -> R17,R18
                 ;	i -> R16
00014b 2fe3      	MOV  R30,R19
00014c 0fee      	LSL  R30
00014d 0fee      	LSL  R30
00014e 0fee      	LSL  R30
00014f 5ce0      	SUBI R30,-LOW(64)
000150 2fae      	MOV  R26,R30
000151 dfa9      	RCALL _WriteComandLCD
000152 e000      	LDI  R16,LOW(0)
                 _0x20:
000153 3008      	CPI  R16,8
000154 f428      	BRSH _0x21
000155 d37e      	RCALL SUBOPT_0x3
000156 91ac      	LD   R26,X
000157 dfaa      	RCALL _CharLCD
000158 5f0f      	SUBI R16,-1
000159 cff9      	RJMP _0x20
                 _0x21:
00015a e8a0      	LDI  R26,LOW(128)
00015b df9f      	RCALL _WriteComandLCD
00015c d451      	RCALL __LOADLOCR4
00015d 9625      	ADIW R28,5
00015e 9508      	RET
                 ; .FEND
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;
                 ;char Cadena[17];
                 ;unsigned char i;
                 ;char random_object;
                 ;unsigned int hs=0;
                 ;unsigned int score = 0;
                 ;int allow_jump = 0;
                 ;int restart = 0;
                 ;int jumping = 0;
                 ;char dino_l[8] = { 0x07, 0x05, 0x07, 0x16, 0x1F, 0x1E, 0x0E, 0x04 };
                 
                 	.DSEG
                 ;char dino_r[8] = { 0x07, 0x05, 0x07, 0x16, 0x1F, 0x1E, 0x0E, 0x02 };
                 ;char cactus_small[8] = { 0x00, 0x00, 0x04, 0x05, 0x15, 0x16, 0x0C, 0x04 };
                 ;char cactus_big[8] = { 0x00, 0x04, 0x05, 0x15, 0x16, 0x1C, 0x04, 0x04 };
                 ;char world[] = {32, 32, 32, 32, 32, 32, 32, 83, 99, 111, 114, 101, 58, 32, 32, 32, 32, 0, 32, 32, 32, 32, 32, 32, 32, 32 ...
                 ;
                 ;int scroll_world() {
                 ; 0000 001E int scroll_world() {
                 
                 	.CSEG
                 _scroll_world:
                 ; .FSTART _scroll_world
                 ; 0000 001F     if (restart==1){
00015f 91a0 031a 	LDS  R26,_restart
000161 91b0 031b 	LDS  R27,_restart+1
000163 9711      	SBIW R26,1
000164 f4f1      	BRNE _0x27
                 ; 0000 0020         for (i = 18; i < 31; i++) {
000165 e1e2      	LDI  R30,LOW(18)
000166 93e0 0312 	STS  _i,R30
                 _0x29:
000168 91a0 0312 	LDS  R26,_i
00016a 31af      	CPI  R26,LOW(0x1F)
00016b f428      	BRSH _0x2A
                 ; 0000 0021           world[i] = 32;
00016c d36d      	RCALL SUBOPT_0x4
00016d e2a0      	LDI  R26,LOW(32)
00016e 83a0      	STD  Z+0,R26
                 ; 0000 0022         }
00016f d370      	RCALL SUBOPT_0x5
000170 cff7      	RJMP _0x29
                 _0x2A:
                 ; 0000 0023         EraseLCD();
000171 dfae      	RCALL _EraseLCD
                 ; 0000 0024         restart=0;
000172 e0e0      	LDI  R30,LOW(0)
000173 93e0 031a 	STS  _restart,R30
000175 93e0 031b 	STS  _restart+1,R30
                 ; 0000 0025         for (i=0; i<50; i++)
000177 93e0 0312 	STS  _i,R30
                 _0x2C:
000179 91a0 0312 	LDS  R26,_i
00017b 33a2      	CPI  R26,LOW(0x32)
00017c f430      	BRSH _0x2D
                 ; 0000 0026         {
                 ; 0000 0027             PORTC.1=1;
00017d 9a41      	SBI  0x8,1
                 ; 0000 0028             delay_us(2000);
00017e d367      	RCALL SUBOPT_0x6
                 ; 0000 0029             PORTC.1=0;
00017f 9841      	CBI  0x8,1
                 ; 0000 002A             delay_us(2000);
000180 d365      	RCALL SUBOPT_0x6
                 ; 0000 002B         }
000181 d35e      	RCALL SUBOPT_0x5
000182 cff6      	RJMP _0x2C
                 _0x2D:
                 ; 0000 002C 
                 ; 0000 002D     }
                 ; 0000 002E     //Generar obstaculos mediante numeros aleatorios
                 ; 0000 002F     delay_ms(250);
                 _0x27:
000183 efaa      	LDI  R26,LOW(250)
000184 e0b0      	LDI  R27,0
000185 d4ce      	RCALL _delay_ms
                 ; 0000 0030     srand(TCNT0);
000186 b5e6      	IN   R30,0x26
000187 e0f0      	LDI  R31,0
000188 01df      	MOVW R26,R30
000189 d2f4      	RCALL _srand
                 ; 0000 0031     random_object =(rand() % (32 - 2 + 1)) + 2;
00018a d2fc      	RCALL _rand
00018b 01df      	MOVW R26,R30
00018c e1ef      	LDI  R30,LOW(31)
00018d e0f0      	LDI  R31,HIGH(31)
00018e d4a0      	RCALL __MODW21
00018f 5fee      	SUBI R30,-LOW(2)
000190 93e0 0313 	STS  _random_object,R30
                 ; 0000 0032     if (random_object < 4) world[31] = random_object;
000192 91a0 0313 	LDS  R26,_random_object
000194 30a4      	CPI  R26,LOW(0x4)
000195 f408      	BRSH _0x32
000196 c001      	RJMP _0x6F
                 ; 0000 0033     else world[31] = 32;
                 _0x32:
000197 e2e0      	LDI  R30,LOW(32)
                 _0x6F:
                +
000198 93e0 035d+STS _world + ( 31 ) , R30
                 	__PUTB1MN _world,31
                 ; 0000 0034     //Detectar colisiones si el dinosaurio se encuentra en el renglon equivocado
                 ; 0000 0035     for (i = 16; i < 32; i++) {
00019a e1e0      	LDI  R30,LOW(16)
00019b 93e0 0312 	STS  _i,R30
                 _0x35:
00019d 91a0 0312 	LDS  R26,_i
00019f 32a0      	CPI  R26,LOW(0x20)
0001a0 f5a0      	BRSH _0x36
                 ; 0000 0036       if (world[i] == 2 || world[i] == 3) {
0001a1 d338      	RCALL SUBOPT_0x4
0001a2 81a0      	LD   R26,Z
0001a3 30a2      	CPI  R26,LOW(0x2)
0001a4 f011      	BREQ _0x38
0001a5 30a3      	CPI  R26,LOW(0x3)
0001a6 f561      	BRNE _0x37
                 _0x38:
                 ; 0000 0037         char prev = (i < 31) ? world[i + 1] : 32;
                 ; 0000 0038         if (world[i - 1] < 2) return 1;
0001a7 9721      	SBIW R28,1
                 ;	prev -> Y+0
0001a8 91a0 0312 	LDS  R26,_i
0001aa 31af      	CPI  R26,LOW(0x1F)
0001ab f438      	BRSH _0x3A
0001ac 91e0 0312 	LDS  R30,_i
0001ae e0f0      	LDI  R31,0
                +
0001af 5ce1     +SUBI R30 , LOW ( - _world - ( 1 ) )
0001b0 4ffc     +SBCI R31 , HIGH ( - _world - ( 1 ) )
                 	__ADDW1MN _world,1
0001b1 81e0      	LD   R30,Z
0001b2 c001      	RJMP _0x3B
                 _0x3A:
0001b3 e2e0      	LDI  R30,LOW(32)
                 _0x3B:
0001b4 83e8      	ST   Y,R30
0001b5 91e0 0312 	LDS  R30,_i
0001b7 e0f0      	LDI  R31,0
0001b8 9731      	SBIW R30,1
0001b9 5ce2      	SUBI R30,LOW(-_world)
0001ba 4ffc      	SBCI R31,HIGH(-_world)
0001bb 81a0      	LD   R26,Z
0001bc 30a2      	CPI  R26,LOW(0x2)
0001bd f420      	BRSH _0x3D
0001be e0e1      	LDI  R30,LOW(1)
0001bf e0f0      	LDI  R31,HIGH(1)
0001c0 9621      	ADIW R28,1
0001c1 9508      	RET
                 ; 0000 0039         world[i - 1] = world[i];
                 _0x3D:
0001c2 91e0 0312 	LDS  R30,_i
0001c4 e0f0      	LDI  R31,0
0001c5 010f      	MOVW R0,R30
0001c6 9731      	SBIW R30,1
0001c7 5ce2      	SUBI R30,LOW(-_world)
0001c8 4ffc      	SBCI R31,HIGH(-_world)
0001c9 01df      	MOVW R26,R30
0001ca 01f0      	MOVW R30,R0
0001cb 5ce2      	SUBI R30,LOW(-_world)
0001cc 4ffc      	SBCI R31,HIGH(-_world)
0001cd 81e0      	LD   R30,Z
0001ce 93ec      	ST   X,R30
                 ; 0000 003A         world[i] = prev;
0001cf d30a      	RCALL SUBOPT_0x4
0001d0 81a8      	LD   R26,Y
0001d1 83a0      	STD  Z+0,R26
                 ; 0000 003B       }
0001d2 9621      	ADIW R28,1
                 ; 0000 003C     }
                 _0x37:
0001d3 d30c      	RCALL SUBOPT_0x5
0001d4 cfc8      	RJMP _0x35
                 _0x36:
                 ; 0000 003D     //Si no se detecto ninguna colision permitir que el mundo continue por 1 tiempo
                 ; 0000 003E     world[15] = 32;
0001d5 e2e0      	LDI  R30,LOW(32)
                +
0001d6 93e0 034d+STS _world + ( 15 ) , R30
                 	__PUTB1MN _world,15
                 ; 0000 003F     if (world[16] < 2) world[16] = 32;
                +
0001d8 91a0 034e+LDS R26 , _world + ( 16 )
                 	__GETB2MN _world,16
0001da 30a2      	CPI  R26,LOW(0x2)
0001db f410      	BRSH _0x3E
                +
0001dc 93e0 034e+STS _world + ( 16 ) , R30
                 	__PUTB1MN _world,16
                 ; 0000 0040     return 0;
                 _0x3E:
0001de e0e0      	LDI  R30,LOW(0)
0001df e0f0      	LDI  R31,HIGH(0)
0001e0 9508      	RET
                 ; 0000 0041 }
                 ; .FEND
                 ;
                 ;void update_world() {
                 ; 0000 0043 void update_world() {
                 _update_world:
                 ; .FSTART _update_world
                 ; 0000 0044     //Generar obstaculos y determinar colisiones mediante funcion auxiliar
                 ; 0000 0045     int game_over = scroll_world();
                 ; 0000 0046     if (jumping ==1){
0001e1 931a      	ST   -Y,R17
0001e2 930a      	ST   -Y,R16
                 ;	game_over -> R16,R17
0001e3 df7b      	RCALL _scroll_world
0001e4 018f      	MOVW R16,R30
0001e5 91a0 031c 	LDS  R26,_jumping
0001e7 91b0 031d 	LDS  R27,_jumping+1
0001e9 9711      	SBIW R26,1
0001ea f409      	BRNE _0x3F
                 ; 0000 0047         MoveCursor(1,1);
0001eb d2ff      	RCALL SUBOPT_0x7
                 ; 0000 0048         CharLCD(32);
                 ; 0000 0049         MoveCursor(1,0);
                 ; 0000 004A         CharLCD(0);
                 ; 0000 004B         world[1] = 0;
                 ; 0000 004C         world[17] = 32;
                 ; 0000 004D     }
                 ; 0000 004E 
                 ; 0000 004F     //Si se llega a una puntacion maxima de 999 mostrar el mensaje de ganador
                 ; 0000 0050     if (score == 999) {
                 _0x3F:
0001ec d311      	RCALL SUBOPT_0x8
0001ed 3ea7      	CPI  R26,LOW(0x3E7)
0001ee e0e3      	LDI  R30,HIGH(0x3E7)
0001ef 07be      	CPC  R27,R30
0001f0 f4e1      	BRNE _0x40
                 ; 0000 0051         EraseLCD();
0001f1 d311      	RCALL SUBOPT_0x9
                 ; 0000 0052         MoveCursor(0,0);
                 ; 0000 0053         StringLCD("    GANASTE ");
                +
0001f2 eba4     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0001f3 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0001f4 df14      	RCALL _StringLCD
                 ; 0000 0054         MoveCursor(0,1);
0001f5 d312      	RCALL SUBOPT_0xA
                 ; 0000 0055         CharLCD(0); CharLCD(32); CharLCD(2); CharLCD(2); CharLCD(2);
0001f6 e0a0      	LDI  R26,LOW(0)
0001f7 df0a      	RCALL _CharLCD
0001f8 e2a0      	LDI  R26,LOW(32)
0001f9 d312      	RCALL SUBOPT_0xB
                 ; 0000 0056         CharLCD(3); CharLCD(3); CharLCD(3); CharLCD(3); CharLCD(3); CharLCD(3);
0001fa d318      	RCALL SUBOPT_0xC
0001fb df06      	RCALL _CharLCD
0001fc d316      	RCALL SUBOPT_0xC
0001fd d30e      	RCALL SUBOPT_0xB
                 ; 0000 0057         CharLCD(2); CharLCD(2); CharLCD(2); CharLCD(32); CharLCD(1);
0001fe e2a0      	LDI  R26,LOW(32)
0001ff df02      	RCALL _CharLCD
000200 e0a1      	LDI  R26,LOW(1)
000201 d317      	RCALL SUBOPT_0xD
                 ; 0000 0058         for (i=0; i<120; i++)
                 _0x42:
000202 91a0 0312 	LDS  R26,_i
000204 37a8      	CPI  R26,LOW(0x78)
000205 f430      	BRSH _0x43
                 ; 0000 0059         {
                 ; 0000 005A             PORTC.1=1;
000206 9a41      	SBI  0x8,1
                 ; 0000 005B             delay_us(835);
000207 d316      	RCALL SUBOPT_0xE
                 ; 0000 005C             PORTC.1=0;
000208 9841      	CBI  0x8,1
                 ; 0000 005D             delay_us(835);
000209 d314      	RCALL SUBOPT_0xE
                 ; 0000 005E         }
00020a d2d5      	RCALL SUBOPT_0x5
00020b cff6      	RJMP _0x42
                 _0x43:
                 ; 0000 005F         restart=1;
00020c d316      	RCALL SUBOPT_0xF
                 ; 0000 0060         delay_ms(3000);
                 ; 0000 0061         score=0;
                 ; 0000 0062         EraseLCD();
                 ; 0000 0063     }
                 ; 0000 0064     //Si se detecta una colision mostrar el mensaje de perdedor
                 ; 0000 0065     if (game_over) {
                 _0x40:
00020d 2e00      	MOV  R0,R16
00020e 2a01      	OR   R0,R17
00020f f171      	BREQ _0x48
                 ; 0000 0066         EraseLCD();
000210 d2f2      	RCALL SUBOPT_0x9
                 ; 0000 0067         MoveCursor(0,0);
                 ; 0000 0068         CharLCD(0);
000211 e0a0      	LDI  R26,LOW(0)
000212 deef      	RCALL _CharLCD
                 ; 0000 0069         CharLCD(3);
000213 e0a3      	LDI  R26,LOW(3)
000214 deed      	RCALL _CharLCD
                 ; 0000 006A         StringLCD("  PERDISTE  ");
                +
000215 eca1     +LDI R26 , LOW ( 2 * _0x0 + ( 13 ) )
000216 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 13 ) )
                 	__POINTW2FN _0x0,13
000217 def1      	RCALL _StringLCD
                 ; 0000 006B         CharLCD(3);
000218 e0a3      	LDI  R26,LOW(3)
000219 dee8      	RCALL _CharLCD
                 ; 0000 006C         MoveCursor(0,1);
00021a d2ed      	RCALL SUBOPT_0xA
                 ; 0000 006D         if (score>=hs) hs = score;
00021b d316      	RCALL SUBOPT_0x10
00021c d2e1      	RCALL SUBOPT_0x8
00021d 17ae      	CP   R26,R30
00021e 07bf      	CPC  R27,R31
00021f f028      	BRLO _0x49
000220 d316      	RCALL SUBOPT_0x11
000221 93e0 0314 	STS  _hs,R30
000223 93f0 0315 	STS  _hs+1,R31
                 ; 0000 006E         sprintf(Cadena,"S:%i  HS:%i", score, hs);
                 _0x49:
000225 d316      	RCALL SUBOPT_0x12
                +
000226 ecee     +LDI R30 , LOW ( 2 * _0x0 + ( 26 ) )
000227 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 26 ) )
                 	__POINTW1FN _0x0,26
000228 d318      	RCALL SUBOPT_0x13
000229 d308      	RCALL SUBOPT_0x10
00022a 2766      	CLR  R22
00022b 2777      	CLR  R23
00022c d41e      	RCALL __PUTPARD1
00022d e088      	LDI  R24,8
00022e d21e      	RCALL _sprintf
00022f 962c      	ADIW R28,12
                 ; 0000 006F         StringLCDVar(Cadena);
000230 d317      	RCALL SUBOPT_0x14
                 ; 0000 0070         for (i=0; i<60; i++)
000231 93e0 0312 	STS  _i,R30
                 _0x4B:
000233 91a0 0312 	LDS  R26,_i
000235 33ac      	CPI  R26,LOW(0x3C)
000236 f430      	BRSH _0x4C
                 ; 0000 0071         {
                 ; 0000 0072             PORTC.1=1;
000237 9a41      	SBI  0x8,1
                 ; 0000 0073             delay_us(1650);
000238 d314      	RCALL SUBOPT_0x15
                 ; 0000 0074             PORTC.1=0;
000239 9841      	CBI  0x8,1
                 ; 0000 0075             delay_us(1650);
00023a d312      	RCALL SUBOPT_0x15
                 ; 0000 0076         }
00023b d2a4      	RCALL SUBOPT_0x5
00023c cff6      	RJMP _0x4B
                 _0x4C:
                 ; 0000 0077         restart=1;
00023d d2e5      	RCALL SUBOPT_0xF
                 ; 0000 0078         delay_ms(3000);
                 ; 0000 0079         score=0;
                 ; 0000 007A         EraseLCD();
                 ; 0000 007B     }
                 ; 0000 007C     //Si ninguna condicion (ganador o perdedor) se mostro simplemente actualizar la puntuacion
                 ; 0000 007D     score++;
                 _0x48:
00023e e1a6      	LDI  R26,LOW(_score)
00023f e0b3      	LDI  R27,HIGH(_score)
000240 d311      	RCALL SUBOPT_0x16
                 ; 0000 007E     MoveCursor(13,0);
000241 e0ed      	LDI  R30,LOW(13)
000242 93ea      	ST   -Y,R30
000243 e0a0      	LDI  R26,LOW(0)
000244 dede      	RCALL _MoveCursor
                 ; 0000 007F     sprintf(Cadena,"%i", score);
000245 d2f6      	RCALL SUBOPT_0x12
                +
000246 ede7     +LDI R30 , LOW ( 2 * _0x0 + ( 35 ) )
000247 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 35 ) )
                 	__POINTW1FN _0x0,35
000248 d2f8      	RCALL SUBOPT_0x13
000249 e084      	LDI  R24,4
00024a d202      	RCALL _sprintf
00024b 9628      	ADIW R28,8
                 ; 0000 0080     StringLCDVar(Cadena);
00024c d2fb      	RCALL SUBOPT_0x14
                 ; 0000 0081     MoveCursor(0,0);
00024d 93ea      	ST   -Y,R30
00024e e0a0      	LDI  R26,LOW(0)
00024f ded3      	RCALL _MoveCursor
                 ; 0000 0082     //Cambiar el frame del juego
                 ; 0000 0083     for (i = 0; i < 32; i++) {
000250 e0e0      	LDI  R30,LOW(0)
000251 93e0 0312 	STS  _i,R30
                 _0x52:
000253 91a0 0312 	LDS  R26,_i
000255 32a0      	CPI  R26,LOW(0x20)
000256 f4d8      	BRSH _0x53
                 ; 0000 0084         if (world[i] < 2) world[i] = world[i] ^ 1;
000257 d282      	RCALL SUBOPT_0x4
000258 81a0      	LD   R26,Z
000259 30a2      	CPI  R26,LOW(0x2)
00025a f438      	BRSH _0x54
00025b d27e      	RCALL SUBOPT_0x4
00025c 010f      	MOVW R0,R30
00025d 81a0      	LD   R26,Z
00025e e0e1      	LDI  R30,LOW(1)
00025f 27ea      	EOR  R30,R26
000260 01d0      	MOVW R26,R0
000261 93ec      	ST   X,R30
                 ; 0000 0085         if (i == 16) MoveCursor(0,1);
                 _0x54:
000262 91a0 0312 	LDS  R26,_i
000264 31a0      	CPI  R26,LOW(0x10)
000265 f409      	BRNE _0x55
000266 d2a1      	RCALL SUBOPT_0xA
                 ; 0000 0086         if (i < 13 || i > 15) CharLCD(world[i]);
                 _0x55:
000267 91a0 0312 	LDS  R26,_i
000269 30ad      	CPI  R26,LOW(0xD)
00026a f010      	BRLO _0x57
00026b 31a0      	CPI  R26,LOW(0x10)
00026c f018      	BRLO _0x56
                 _0x57:
00026d d26c      	RCALL SUBOPT_0x4
00026e 81a0      	LD   R26,Z
00026f de92      	RCALL _CharLCD
                 ; 0000 0087 
                 ; 0000 0088     }
                 _0x56:
000270 d26f      	RCALL SUBOPT_0x5
000271 cfe1      	RJMP _0x52
                 _0x53:
                 ; 0000 0089 }
000272 c211      	RJMP _0x20A0001
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 008C {
                 _main:
                 ; .FSTART _main
                 ; 0000 008D     CLKPR=0x80;
000273 e8e0      	LDI  R30,LOW(128)
000274 93e0 0061 	STS  97,R30
                 ; 0000 008E     CLKPR=0x04;
000276 e0e4      	LDI  R30,LOW(4)
000277 93e0 0061 	STS  97,R30
                 ; 0000 008F     SetupLCD();
000279 de3b      	RCALL _SetupLCD
                 ; 0000 0090     PORTC.0=1;
00027a 9a40      	SBI  0x8,0
                 ; 0000 0091     DDRC.1=1;
00027b 9a39      	SBI  0x7,1
                 ; 0000 0092     TCCR0B=0x01;
00027c e0e1      	LDI  R30,LOW(1)
00027d bde5      	OUT  0x25,R30
                 ; 0000 0093     CreateChar(0,dino_l);
00027e e0e0      	LDI  R30,LOW(0)
00027f 93ea      	ST   -Y,R30
000280 e1ae      	LDI  R26,LOW(_dino_l)
000281 e0b3      	LDI  R27,HIGH(_dino_l)
000282 dec4      	RCALL _CreateChar
                 ; 0000 0094     CreateChar(1,dino_r);
000283 e0e1      	LDI  R30,LOW(1)
000284 93ea      	ST   -Y,R30
000285 e2a6      	LDI  R26,LOW(_dino_r)
000286 e0b3      	LDI  R27,HIGH(_dino_r)
000287 debf      	RCALL _CreateChar
                 ; 0000 0095     CreateChar(2,cactus_small);
000288 e0e2      	LDI  R30,LOW(2)
000289 93ea      	ST   -Y,R30
00028a e2ae      	LDI  R26,LOW(_cactus_small)
00028b e0b3      	LDI  R27,HIGH(_cactus_small)
00028c deba      	RCALL _CreateChar
                 ; 0000 0096     CreateChar(3,cactus_big);
00028d e0e3      	LDI  R30,LOW(3)
00028e 93ea      	ST   -Y,R30
00028f e3a6      	LDI  R26,LOW(_cactus_big)
000290 e0b3      	LDI  R27,HIGH(_cactus_big)
000291 deb5      	RCALL _CreateChar
                 ; 0000 0097 
                 ; 0000 0098     while (1)
                 _0x5D:
                 ; 0000 0099     {
                 ; 0000 009A 
                 ; 0000 009B         //Usuario puede terminar de saltar cuando haya terminado el salto anterior
                 ; 0000 009C         allow_jump = allow_jump ^ 1;
000292 d2c5      	RCALL SUBOPT_0x17
000293 e0e1      	LDI  R30,LOW(1)
000294 e0f0      	LDI  R31,HIGH(1)
000295 27ea      	EOR  R30,R26
000296 27fb      	EOR  R31,R27
000297 93e0 0318 	STS  _allow_jump,R30
000299 93f0 0319 	STS  _allow_jump+1,R31
                 ; 0000 009D         //Si se presiona boton de saltar y puede saltar entonces realizar salto
                 ; 0000 009E         if (PINC.0==0 && allow_jump == 1) {
00029b 9930      	SBIC 0x6,0
00029c c003      	RJMP _0x61
00029d d2ba      	RCALL SUBOPT_0x17
00029e 9711      	SBIW R26,1
00029f f009      	BREQ _0x62
                 _0x61:
0002a0 c033      	RJMP _0x60
                 _0x62:
                 ; 0000 009F             jumping =1;
0002a1 e0e1      	LDI  R30,LOW(1)
0002a2 e0f0      	LDI  R31,HIGH(1)
0002a3 93e0 031c 	STS  _jumping,R30
0002a5 93f0 031d 	STS  _jumping+1,R31
                 ; 0000 00A0             //Mover el dinosaurio un renglon arriba por 4 tiempos
                 ; 0000 00A1             MoveCursor(1,1);
0002a7 d243      	RCALL SUBOPT_0x7
                 ; 0000 00A2             CharLCD(32);
                 ; 0000 00A3             MoveCursor(1,0);
                 ; 0000 00A4             CharLCD(0);
                 ; 0000 00A5             world[1] = 0;
                 ; 0000 00A6             world[17] = 32;
                 ; 0000 00A7             for (i = 0; i < 4; i++) {
0002a8 e0e0      	LDI  R30,LOW(0)
0002a9 93e0 0312 	STS  _i,R30
                 _0x64:
0002ab 91a0 0312 	LDS  R26,_i
0002ad 30a4      	CPI  R26,LOW(0x4)
0002ae f420      	BRSH _0x65
                 ; 0000 00A8                 MoveCursor(1,1);
0002af d23b      	RCALL SUBOPT_0x7
                 ; 0000 00A9                 CharLCD(32);
                 ; 0000 00AA                 MoveCursor(1,0);
                 ; 0000 00AB                 CharLCD(0);
                 ; 0000 00AC                 world[1] = 0;
                 ; 0000 00AD                 world[17] = 32;
                 ; 0000 00AE                 update_world();
0002b0 df30      	RCALL _update_world
                 ; 0000 00AF             }
0002b1 d22e      	RCALL SUBOPT_0x5
0002b2 cff8      	RJMP _0x64
                 _0x65:
                 ; 0000 00B0             jumping=0;
0002b3 e0e0      	LDI  R30,LOW(0)
0002b4 93e0 031c 	STS  _jumping,R30
0002b6 93e0 031d 	STS  _jumping+1,R30
                 ; 0000 00B1             //Terminados los 4 tiempos si no existio colision regresar a posicion orignal
                 ; 0000 00B2             world[1] = 32;
0002b8 e2e0      	LDI  R30,LOW(32)
                +
0002b9 93e0 033f+STS _world + ( 1 ) , R30
                 	__PUTB1MN _world,1
                 ; 0000 00B3             world[17] = 0;
0002bb e0e0      	LDI  R30,LOW(0)
                +
0002bc 93e0 034f+STS _world + ( 17 ) , R30
                 	__PUTB1MN _world,17
                 ; 0000 00B4             MoveCursor(1,0);
0002be e0e1      	LDI  R30,LOW(1)
0002bf 93ea      	ST   -Y,R30
0002c0 e0a0      	LDI  R26,LOW(0)
0002c1 de61      	RCALL _MoveCursor
                 ; 0000 00B5             CharLCD(32);
0002c2 e2a0      	LDI  R26,LOW(32)
0002c3 de3e      	RCALL _CharLCD
                 ; 0000 00B6             MoveCursor(1,1);
0002c4 e0e1      	LDI  R30,LOW(1)
0002c5 93ea      	ST   -Y,R30
0002c6 e0a1      	LDI  R26,LOW(1)
0002c7 de5b      	RCALL _MoveCursor
                 ; 0000 00B7             CharLCD(0);
0002c8 e0a0      	LDI  R26,LOW(0)
0002c9 d24f      	RCALL SUBOPT_0xD
                 ; 0000 00B8             for (i=0; i<80; i++)
                 _0x67:
0002ca 91a0 0312 	LDS  R26,_i
0002cc 35a0      	CPI  R26,LOW(0x50)
0002cd f430      	BRSH _0x68
                 ; 0000 00B9             {
                 ; 0000 00BA                 PORTC.1=1;
0002ce 9a41      	SBI  0x8,1
                 ; 0000 00BB                 delay_us(1250);
0002cf d28d      	RCALL SUBOPT_0x18
                 ; 0000 00BC                 PORTC.1=0;
0002d0 9841      	CBI  0x8,1
                 ; 0000 00BD                 delay_us(1250);
0002d1 d28b      	RCALL SUBOPT_0x18
                 ; 0000 00BE             }
0002d2 d20d      	RCALL SUBOPT_0x5
0002d3 cff6      	RJMP _0x67
                 _0x68:
                 ; 0000 00BF         }
                 ; 0000 00C0         //Si no se presiona el boton de saltar realizar 1 tiempo
                 ; 0000 00C1         update_world();
                 _0x60:
0002d4 df0c      	RCALL _update_world
                 ; 0000 00C2     }
0002d5 cfbc      	RJMP _0x5D
                 ; 0000 00C3 }
                 _0x6D:
0002d6 cfff      	RJMP _0x6D
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
0002d7 d2ce      	RCALL __SAVELOCR5
0002d8 019d      	MOVW R18,R26
0002d9 814d      	LDD  R20,Y+5
0002da 9612      	ADIW R26,2
0002db d365      	RCALL __GETW1P
0002dc 9730      	SBIW R30,0
0002dd f0e1      	BREQ _0x2000016
0002de 01d9      	MOVW R26,R18
0002df 9614      	ADIW R26,4
0002e0 d360      	RCALL __GETW1P
0002e1 018f      	MOVW R16,R30
0002e2 9730      	SBIW R30,0
0002e3 f059      	BREQ _0x2000018
                +
0002e4 3002     +CPI R16 , LOW ( 2 )
0002e5 e0e0     +LDI R30 , HIGH ( 2 )
0002e6 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0002e7 f060      	BRLO _0x2000019
0002e8 01f8      	MOVW R30,R16
0002e9 9731      	SBIW R30,1
0002ea 018f      	MOVW R16,R30
                +
0002eb 01d9     +MOVW R26 , R18
0002ec 9614     +ADIW R26 , 4
0002ed 93ed     +ST X + , R30
0002ee 93fc     +ST X , R31
                 	__PUTW1RNS 18,4
                 _0x2000018:
0002ef 01d9      	MOVW R26,R18
0002f0 9612      	ADIW R26,2
0002f1 d260      	RCALL SUBOPT_0x16
0002f2 9731      	SBIW R30,1
0002f3 8340      	ST   Z,R20
                 _0x2000019:
0002f4 01d9      	MOVW R26,R18
0002f5 d34b      	RCALL __GETW1P
0002f6 23ff      	TST  R31
0002f7 f00a      	BRMI _0x200001A
0002f8 d259      	RCALL SUBOPT_0x16
                 _0x200001A:
0002f9 c005      	RJMP _0x200001B
                 _0x2000016:
0002fa 01d9      	MOVW R26,R18
0002fb efef      	LDI  R30,LOW(65535)
0002fc efff      	LDI  R31,HIGH(65535)
0002fd 93ed      	ST   X+,R30
0002fe 93fc      	ST   X,R31
                 _0x200001B:
0002ff d2ad      	RCALL __LOADLOCR5
000300 9626      	ADIW R28,6
000301 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000302 93ba      	ST   -Y,R27
000303 93aa      	ST   -Y,R26
000304 972b      	SBIW R28,11
000305 d29f      	RCALL __SAVELOCR6
000306 e000      	LDI  R16,0
000307 89a9      	LDD  R26,Y+17
000308 89ba      	LDD  R27,Y+17+1
000309 e0e0      	LDI  R30,LOW(0)
00030a e0f0      	LDI  R31,HIGH(0)
00030b 93ed      	ST   X+,R30
00030c 93fc      	ST   X,R31
                 _0x200001C:
00030d 89ef      	LDD  R30,Y+23
00030e 8df8      	LDD  R31,Y+23+1
00030f 9631      	ADIW R30,1
000310 8bef      	STD  Y+23,R30
000311 8ff8      	STD  Y+23+1,R31
000312 9731      	SBIW R30,1
000313 91e4      	LPM  R30,Z
000314 2f3e      	MOV  R19,R30
000315 30e0      	CPI  R30,0
000316 f409      	BRNE PC+2
000317 c12e      	RJMP _0x200001E
000318 2fe0      	MOV  R30,R16
000319 30e0      	CPI  R30,0
00031a f431      	BRNE _0x2000022
00031b 3235      	CPI  R19,37
00031c f411      	BRNE _0x2000023
00031d e001      	LDI  R16,LOW(1)
00031e c001      	RJMP _0x2000024
                 _0x2000023:
00031f d242      	RCALL SUBOPT_0x19
                 _0x2000024:
000320 c124      	RJMP _0x2000021
                 _0x2000022:
000321 30e1      	CPI  R30,LOW(0x1)
000322 f4a1      	BRNE _0x2000025
000323 3235      	CPI  R19,37
000324 f411      	BRNE _0x2000026
000325 d23c      	RCALL SUBOPT_0x19
000326 c11d      	RJMP _0x20000DB
                 _0x2000026:
000327 e002      	LDI  R16,LOW(2)
000328 e050      	LDI  R21,LOW(0)
000329 e010      	LDI  R17,LOW(0)
00032a 323d      	CPI  R19,45
00032b f411      	BRNE _0x2000027
00032c e011      	LDI  R17,LOW(1)
00032d c117      	RJMP _0x2000021
                 _0x2000027:
00032e 323b      	CPI  R19,43
00032f f411      	BRNE _0x2000028
000330 e25b      	LDI  R21,LOW(43)
000331 c113      	RJMP _0x2000021
                 _0x2000028:
000332 3230      	CPI  R19,32
000333 f411      	BRNE _0x2000029
000334 e250      	LDI  R21,LOW(32)
000335 c10f      	RJMP _0x2000021
                 _0x2000029:
000336 c002      	RJMP _0x200002A
                 _0x2000025:
000337 30e2      	CPI  R30,LOW(0x2)
000338 f439      	BRNE _0x200002B
                 _0x200002A:
000339 e040      	LDI  R20,LOW(0)
00033a e003      	LDI  R16,LOW(3)
00033b 3330      	CPI  R19,48
00033c f411      	BRNE _0x200002C
00033d 6810      	ORI  R17,LOW(128)
00033e c106      	RJMP _0x2000021
                 _0x200002C:
00033f c002      	RJMP _0x200002D
                 _0x200002B:
000340 30e3      	CPI  R30,LOW(0x3)
000341 f491      	BRNE _0x200002E
                 _0x200002D:
000342 3330      	CPI  R19,48
000343 f010      	BRLO _0x2000030
000344 333a      	CPI  R19,58
000345 f008      	BRLO _0x2000031
                 _0x2000030:
000346 c007      	RJMP _0x200002F
                 _0x2000031:
000347 e0aa      	LDI  R26,LOW(10)
000348 9f4a      	MUL  R20,R26
000349 2d40      	MOV  R20,R0
00034a 2fe3      	MOV  R30,R19
00034b 53e0      	SUBI R30,LOW(48)
00034c 0f4e      	ADD  R20,R30
00034d c0f7      	RJMP _0x2000021
                 _0x200002F:
00034e 363c      	CPI  R19,108
00034f f419      	BRNE _0x2000032
000350 6012      	ORI  R17,LOW(2)
000351 e005      	LDI  R16,LOW(5)
000352 c0f2      	RJMP _0x2000021
                 _0x2000032:
000353 c003      	RJMP _0x2000033
                 _0x200002E:
000354 30e5      	CPI  R30,LOW(0x5)
000355 f009      	BREQ PC+2
000356 c0ee      	RJMP _0x2000021
                 _0x2000033:
000357 2fe3      	MOV  R30,R19
000358 36e3      	CPI  R30,LOW(0x63)
000359 f439      	BRNE _0x2000038
00035a d20e      	RCALL SUBOPT_0x1A
00035b 89ed      	LDD  R30,Y+21
00035c 89fe      	LDD  R31,Y+21+1
00035d 81a4      	LDD  R26,Z+4
00035e 93aa      	ST   -Y,R26
00035f d20f      	RCALL SUBOPT_0x1B
000360 c0e3      	RJMP _0x2000039
                 _0x2000038:
000361 37e3      	CPI  R30,LOW(0x73)
000362 f429      	BRNE _0x200003B
000363 d205      	RCALL SUBOPT_0x1A
000364 d210      	RCALL SUBOPT_0x1C
000365 d136      	RCALL _strlen
000366 2f0e      	MOV  R16,R30
000367 c007      	RJMP _0x200003C
                 _0x200003B:
000368 37e0      	CPI  R30,LOW(0x70)
000369 f451      	BRNE _0x200003E
00036a d1fe      	RCALL SUBOPT_0x1A
00036b d209      	RCALL SUBOPT_0x1C
00036c d13b      	RCALL _strlenf
00036d 2f0e      	MOV  R16,R30
00036e 6018      	ORI  R17,LOW(8)
                 _0x200003C:
00036f 771f      	ANDI R17,LOW(127)
000370 e0e0      	LDI  R30,LOW(0)
000371 8be8      	STD  Y+16,R30
000372 e020      	LDI  R18,LOW(0)
000373 c059      	RJMP _0x200003F
                 _0x200003E:
000374 36e4      	CPI  R30,LOW(0x64)
000375 f011      	BREQ _0x2000042
000376 36e9      	CPI  R30,LOW(0x69)
000377 f411      	BRNE _0x2000043
                 _0x2000042:
000378 6014      	ORI  R17,LOW(4)
000379 c002      	RJMP _0x2000044
                 _0x2000043:
00037a 37e5      	CPI  R30,LOW(0x75)
00037b f491      	BRNE _0x2000045
                 _0x2000044:
00037c e0ea      	LDI  R30,LOW(10)
00037d 8be8      	STD  Y+16,R30
00037e ff11      	SBRS R17,1
00037f c007      	RJMP _0x2000046
                +
000380 e0e0     +LDI R30 , LOW ( 0x3B9ACA00 )
000381 ecfa     +LDI R31 , HIGH ( 0x3B9ACA00 )
000382 e96a     +LDI R22 , BYTE3 ( 0x3B9ACA00 )
000383 e37b     +LDI R23 , BYTE4 ( 0x3B9ACA00 )
                 	__GETD1N 0x3B9ACA00
000384 d1fa      	RCALL SUBOPT_0x1D
000385 e00a      	LDI  R16,LOW(10)
000386 c01f      	RJMP _0x2000047
                 _0x2000046:
                +
000387 e1e0     +LDI R30 , LOW ( 0x2710 )
000388 e2f7     +LDI R31 , HIGH ( 0x2710 )
000389 e060     +LDI R22 , BYTE3 ( 0x2710 )
00038a e070     +LDI R23 , BYTE4 ( 0x2710 )
                 	__GETD1N 0x2710
00038b d1f3      	RCALL SUBOPT_0x1D
00038c e005      	LDI  R16,LOW(5)
00038d c018      	RJMP _0x2000047
                 _0x2000045:
00038e 35e8      	CPI  R30,LOW(0x58)
00038f f411      	BRNE _0x2000049
000390 6018      	ORI  R17,LOW(8)
000391 c003      	RJMP _0x200004A
                 _0x2000049:
000392 37e8      	CPI  R30,LOW(0x78)
000393 f009      	BREQ PC+2
000394 c0af      	RJMP _0x200007D
                 _0x200004A:
000395 e1e0      	LDI  R30,LOW(16)
000396 8be8      	STD  Y+16,R30
000397 ff11      	SBRS R17,1
000398 c007      	RJMP _0x200004C
                +
000399 e0e0     +LDI R30 , LOW ( 0x10000000 )
00039a e0f0     +LDI R31 , HIGH ( 0x10000000 )
00039b e060     +LDI R22 , BYTE3 ( 0x10000000 )
00039c e170     +LDI R23 , BYTE4 ( 0x10000000 )
                 	__GETD1N 0x10000000
00039d d1e1      	RCALL SUBOPT_0x1D
00039e e008      	LDI  R16,LOW(8)
00039f c006      	RJMP _0x2000047
                 _0x200004C:
                +
0003a0 e0e0     +LDI R30 , LOW ( 0x1000 )
0003a1 e1f0     +LDI R31 , HIGH ( 0x1000 )
0003a2 e060     +LDI R22 , BYTE3 ( 0x1000 )
0003a3 e070     +LDI R23 , BYTE4 ( 0x1000 )
                 	__GETD1N 0x1000
0003a4 d1da      	RCALL SUBOPT_0x1D
0003a5 e004      	LDI  R16,LOW(4)
                 _0x2000047:
0003a6 ff11      	SBRS R17,1
0003a7 c006      	RJMP _0x200004D
0003a8 d1c0      	RCALL SUBOPT_0x1A
0003a9 89ad      	LDD  R26,Y+21
0003aa 89be      	LDD  R27,Y+21+1
0003ab 9614      	ADIW R26,4
0003ac d298      	RCALL __GETD1P
0003ad c00a      	RJMP _0x20000DC
                 _0x200004D:
0003ae ff12      	SBRS R17,2
0003af c004      	RJMP _0x200004F
0003b0 d1b8      	RCALL SUBOPT_0x1A
0003b1 d1d2      	RCALL SUBOPT_0x1E
0003b2 d220      	RCALL __CWD1
0003b3 c004      	RJMP _0x20000DC
                 _0x200004F:
0003b4 d1b4      	RCALL SUBOPT_0x1A
0003b5 d1ce      	RCALL SUBOPT_0x1E
0003b6 2766      	CLR  R22
0003b7 2777      	CLR  R23
                 _0x20000DC:
                +
0003b8 87ec     +STD Y + 12 , R30
0003b9 87fd     +STD Y + 12 + 1 , R31
0003ba 876e     +STD Y + 12 + 2 , R22
0003bb 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
0003bc ff12      	SBRS R17,2
0003bd c00f      	RJMP _0x2000051
0003be 85af      	LDD  R26,Y+15
0003bf 23aa      	TST  R26
0003c0 f43a      	BRPL _0x2000052
                +
0003c1 85ec     +LDD R30 , Y + 12
0003c2 85fd     +LDD R31 , Y + 12 + 1
0003c3 856e     +LDD R22 , Y + 12 + 2
0003c4 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
0003c5 d205      	RCALL __ANEGD1
0003c6 d1c2      	RCALL SUBOPT_0x1F
0003c7 e25d      	LDI  R21,LOW(45)
                 _0x2000052:
0003c8 3050      	CPI  R21,0
0003c9 f011      	BREQ _0x2000053
0003ca 5f0f      	SUBI R16,-LOW(1)
0003cb c001      	RJMP _0x2000054
                 _0x2000053:
0003cc 7f1b      	ANDI R17,LOW(251)
                 _0x2000054:
                 _0x2000051:
                 _0x200003F:
0003cd fd10      	SBRC R17,0
0003ce c010      	RJMP _0x2000055
                 _0x2000056:
0003cf 1704      	CP   R16,R20
0003d0 f470      	BRSH _0x2000058
0003d1 ff17      	SBRS R17,7
0003d2 c008      	RJMP _0x2000059
0003d3 ff12      	SBRS R17,2
0003d4 c004      	RJMP _0x200005A
0003d5 7f1b      	ANDI R17,LOW(251)
0003d6 2f35      	MOV  R19,R21
0003d7 5001      	SUBI R16,LOW(1)
0003d8 c001      	RJMP _0x200005B
                 _0x200005A:
0003d9 e330      	LDI  R19,LOW(48)
                 _0x200005B:
0003da c001      	RJMP _0x200005C
                 _0x2000059:
0003db e230      	LDI  R19,LOW(32)
                 _0x200005C:
0003dc d185      	RCALL SUBOPT_0x19
0003dd 5041      	SUBI R20,LOW(1)
0003de cff0      	RJMP _0x2000056
                 _0x2000058:
                 _0x2000055:
0003df 2f20      	MOV  R18,R16
0003e0 89e8      	LDD  R30,Y+16
0003e1 30e0      	CPI  R30,0
0003e2 f4b1      	BRNE _0x200005D
                 _0x200005E:
0003e3 3020      	CPI  R18,0
0003e4 f099      	BREQ _0x2000060
0003e5 ff13      	SBRS R17,3
0003e6 c006      	RJMP _0x2000061
0003e7 81ee      	LDD  R30,Y+6
0003e8 81ff      	LDD  R31,Y+6+1
0003e9 9135      	LPM  R19,Z+
0003ea 83ee      	STD  Y+6,R30
0003eb 83ff      	STD  Y+6+1,R31
0003ec c005      	RJMP _0x2000062
                 _0x2000061:
0003ed 81ae      	LDD  R26,Y+6
0003ee 81bf      	LDD  R27,Y+6+1
0003ef 913d      	LD   R19,X+
0003f0 83ae      	STD  Y+6,R26
0003f1 83bf      	STD  Y+6+1,R27
                 _0x2000062:
0003f2 d16f      	RCALL SUBOPT_0x19
0003f3 3040      	CPI  R20,0
0003f4 f009      	BREQ _0x2000063
0003f5 5041      	SUBI R20,LOW(1)
                 _0x2000063:
0003f6 5021      	SUBI R18,LOW(1)
0003f7 cfeb      	RJMP _0x200005E
                 _0x2000060:
0003f8 c042      	RJMP _0x2000064
                 _0x200005D:
                 _0x2000066:
0003f9 d194      	RCALL SUBOPT_0x20
0003fa d210      	RCALL __DIVD21U
0003fb 2f3e      	MOV  R19,R30
0003fc 303a      	CPI  R19,10
0003fd f030      	BRLO _0x2000068
0003fe ff13      	SBRS R17,3
0003ff c002      	RJMP _0x2000069
000400 5c39      	SUBI R19,-LOW(55)
000401 c001      	RJMP _0x200006A
                 _0x2000069:
000402 5a39      	SUBI R19,-LOW(87)
                 _0x200006A:
000403 c001      	RJMP _0x200006B
                 _0x2000068:
000404 5d30      	SUBI R19,-LOW(48)
                 _0x200006B:
000405 fd14      	SBRC R17,4
000406 c01e      	RJMP _0x200006D
000407 3331      	CPI  R19,49
000408 f448      	BRSH _0x200006F
000409 d18d      	RCALL SUBOPT_0x21
                +
00040a 30a1     +CPI R26 , LOW ( 0x1 )
00040b e0e0     +LDI R30 , HIGH ( 0x1 )
00040c 07be     +CPC R27 , R30
00040d e0e0     +LDI R30 , BYTE3 ( 0x1 )
00040e 078e     +CPC R24 , R30
00040f e0e0     +LDI R30 , BYTE4 ( 0x1 )
000410 079e     +CPC R25 , R30
                 	__CPD2N 0x1
000411 f409      	BRNE _0x200006E
                 _0x200006F:
000412 c009      	RJMP _0x2000071
                 _0x200006E:
000413 1742      	CP   R20,R18
000414 f010      	BRLO _0x2000073
000415 ff10      	SBRS R17,0
000416 c001      	RJMP _0x2000074
                 _0x2000073:
000417 c011      	RJMP _0x2000072
                 _0x2000074:
000418 e230      	LDI  R19,LOW(32)
000419 ff17      	SBRS R17,7
00041a c00a      	RJMP _0x2000075
00041b e330      	LDI  R19,LOW(48)
                 _0x2000071:
00041c 6110      	ORI  R17,LOW(16)
00041d ff12      	SBRS R17,2
00041e c006      	RJMP _0x2000076
00041f 7f1b      	ANDI R17,LOW(251)
000420 935a      	ST   -Y,R21
000421 d14d      	RCALL SUBOPT_0x1B
000422 3040      	CPI  R20,0
000423 f009      	BREQ _0x2000077
000424 5041      	SUBI R20,LOW(1)
                 _0x2000077:
                 _0x2000076:
                 _0x2000075:
                 _0x200006D:
000425 d13c      	RCALL SUBOPT_0x19
000426 3040      	CPI  R20,0
000427 f009      	BREQ _0x2000078
000428 5041      	SUBI R20,LOW(1)
                 _0x2000078:
                 _0x2000072:
000429 5021      	SUBI R18,LOW(1)
00042a d163      	RCALL SUBOPT_0x20
00042b d211      	RCALL __MODD21U
00042c d15c      	RCALL SUBOPT_0x1F
00042d 89e8      	LDD  R30,Y+16
00042e d168      	RCALL SUBOPT_0x21
00042f 27ff      	CLR  R31
000430 2766      	CLR  R22
000431 2777      	CLR  R23
000432 d1d8      	RCALL __DIVD21U
000433 d14b      	RCALL SUBOPT_0x1D
                +
000434 85e8     +LDD R30 , Y + 8
000435 85f9     +LDD R31 , Y + 8 + 1
000436 856a     +LDD R22 , Y + 8 + 2
000437 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
000438 d217      	RCALL __CPD10
000439 f009      	BREQ _0x2000067
00043a cfbe      	RJMP _0x2000066
                 _0x2000067:
                 _0x2000064:
00043b ff10      	SBRS R17,0
00043c c007      	RJMP _0x2000079
                 _0x200007A:
00043d 3040      	CPI  R20,0
00043e f029      	BREQ _0x200007C
00043f 5041      	SUBI R20,LOW(1)
000440 e2e0      	LDI  R30,LOW(32)
000441 93ea      	ST   -Y,R30
000442 d12c      	RCALL SUBOPT_0x1B
000443 cff9      	RJMP _0x200007A
                 _0x200007C:
                 _0x2000079:
                 _0x200007D:
                 _0x2000039:
                 _0x20000DB:
000444 e000      	LDI  R16,LOW(0)
                 _0x2000021:
000445 cec7      	RJMP _0x200001C
                 _0x200001E:
000446 89a9      	LDD  R26,Y+17
000447 89ba      	LDD  R27,Y+17+1
000448 91ed      	LD   R30,X+
000449 91fd      	LD   R31,X+
00044a d161      	RCALL __LOADLOCR6
00044b 9669      	ADIW R28,25
00044c 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00044d 92ff      	PUSH R15
00044e 2ef8      	MOV  R15,R24
00044f 9726      	SBIW R28,6
000450 d154      	RCALL __SAVELOCR6
000451 01fe      	MOVW R30,R28
000452 d16c      	RCALL __ADDW1R15
                +
000453 8546     +LDD R20 , Z + 14
000454 8557     +LDD R21 , Z + 14 + 1
                 	__GETWRZ 20,21,14
000455 2e04      	MOV  R0,R20
000456 2a05      	OR   R0,R21
000457 f419      	BRNE _0x200007E
000458 efef      	LDI  R30,LOW(65535)
000459 efff      	LDI  R31,HIGH(65535)
00045a c01f      	RJMP _0x20A0002
                 _0x200007E:
00045b 01de      	MOVW R26,R28
00045c 9618      	ADIW R26,8
00045d d165      	RCALL __ADDW2R15
00045e 018d      	MOVW R16,R26
                +
00045f 8748     +STD Y + 8 , R20
000460 8759     +STD Y + 8 + 1 , R21
                 	__PUTWSR 20,21,8
000461 e0e0      	LDI  R30,LOW(0)
000462 87ea      	STD  Y+10,R30
000463 87eb      	STD  Y+10+1,R30
000464 01de      	MOVW R26,R28
000465 961c      	ADIW R26,12
000466 d15c      	RCALL __ADDW2R15
000467 91ed      	LD   R30,X+
000468 91fd      	LD   R31,X+
000469 93fa      	ST   -Y,R31
00046a 93ea      	ST   -Y,R30
00046b 931a      	ST   -Y,R17
00046c 930a      	ST   -Y,R16
00046d ede7      	LDI  R30,LOW(_put_buff_G100)
00046e e0f2      	LDI  R31,HIGH(_put_buff_G100)
00046f 93fa      	ST   -Y,R31
000470 93ea      	ST   -Y,R30
000471 01de      	MOVW R26,R28
000472 961c      	ADIW R26,12
000473 de8e      	RCALL __print_G100
000474 019f      	MOVW R18,R30
000475 85a8      	LDD  R26,Y+8
000476 85b9      	LDD  R27,Y+8+1
000477 e0e0      	LDI  R30,LOW(0)
000478 93ec      	ST   X,R30
000479 01f9      	MOVW R30,R18
                 _0x20A0002:
00047a d131      	RCALL __LOADLOCR6
00047b 962c      	ADIW R28,12
00047c 90ff      	POP  R15
00047d 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 _srand:
                 ; .FSTART _srand
00047e 931a      	ST   -Y,R17
00047f 930a      	ST   -Y,R16
000480 018d      	MOVW R16,R26
000481 01f8      	MOVW R30,R16
000482 d150      	RCALL __CWD1
000483 d118      	RCALL SUBOPT_0x22
                 _0x20A0001:
000484 9109      	LD   R16,Y+
000485 9119      	LD   R17,Y+
000486 9508      	RET
                 ; .FEND
                 _rand:
                 ; .FSTART _rand
000487 91e0 035e 	LDS  R30,__seed_G101
000489 91f0 035f 	LDS  R31,__seed_G101+1
00048b 9160 0360 	LDS  R22,__seed_G101+2
00048d 9170 0361 	LDS  R23,__seed_G101+3
                +
00048f e6ad     +LDI R26 , LOW ( 0x41C64E6D )
000490 e4be     +LDI R27 , HIGH ( 0x41C64E6D )
000491 ec86     +LDI R24 , BYTE3 ( 0x41C64E6D )
000492 e491     +LDI R25 , BYTE4 ( 0x41C64E6D )
                 	__GETD2N 0x41C64E6D
000493 d144      	RCALL __MULD12U
                +
000494 59ee     +SUBI R30 , LOW ( - 30562 )
000495 48f8     +SBCI R31 , HIGH ( - 30562 )
000496 4f6f     +SBCI R22 , BYTE3 ( - 30562 )
000497 4f7f     +SBCI R23 , BYTE4 ( - 30562 )
                 	__ADDD1N 30562
000498 d103      	RCALL SUBOPT_0x22
000499 01fb      	movw r30,r22
00049a 77ff      	andi r31,0x7F
00049b 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00049c 93ba      	ST   -Y,R27
00049d 93aa      	ST   -Y,R26
00049e 91a9          ld   r26,y+
00049f 91b9          ld   r27,y+
0004a0 27ee          clr  r30
0004a1 27ff          clr  r31
                 strlen0:
0004a2 916d          ld   r22,x+
0004a3 2366          tst  r22
0004a4 f011          breq strlen1
0004a5 9631          adiw r30,1
0004a6 cffb          rjmp strlen0
                 strlen1:
0004a7 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0004a8 93ba      	ST   -Y,R27
0004a9 93aa      	ST   -Y,R26
0004aa 27aa          clr  r26
0004ab 27bb          clr  r27
0004ac 91e9          ld   r30,y+
0004ad 91f9          ld   r31,y+
                 strlenf0:
0004ae 9005      	lpm  r0,z+
0004af 2000          tst  r0
0004b0 f011          breq strlenf1
0004b1 9611          adiw r26,1
0004b2 cffb          rjmp strlenf0
                 strlenf1:
0004b3 01fd          movw r30,r26
0004b4 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _cursor:
000300           	.BYTE 0x1
                 _Cadena:
000301           	.BYTE 0x11
                 _i:
000312           	.BYTE 0x1
                 _random_object:
000313           	.BYTE 0x1
                 _hs:
000314           	.BYTE 0x2
                 _score:
000316           	.BYTE 0x2
                 _allow_jump:
000318           	.BYTE 0x2
                 _restart:
00031a           	.BYTE 0x2
                 _jumping:
00031c           	.BYTE 0x2
                 _dino_l:
00031e           	.BYTE 0x8
                 _dino_r:
000326           	.BYTE 0x8
                 _cactus_small:
00032e           	.BYTE 0x8
                 _cactus_big:
000336           	.BYTE 0x8
                 _world:
00033e           	.BYTE 0x20
                 __seed_G101:
00035e           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x0:
0004b5 e0a2      	LDI  R26,LOW(2)
0004b6 e0b0      	LDI  R27,0
0004b7 d19c      	RCALL _delay_ms
0004b8 2fe1      	MOV  R30,R17
0004b9 7fe0      	ANDI R30,LOW(0xF0)
0004ba 2f0e      	MOV  R16,R30
0004bb 9502      	SWAP R16
0004bc 700f      	ANDI R16,0xF
0004bd 2fa0      	MOV  R26,R16
0004be dc24      	RCALL _SendDataBitsLCD
0004bf dc20      	RCALL _PulseEn
0004c0 2fe1      	MOV  R30,R17
0004c1 70ef      	ANDI R30,LOW(0xF)
0004c2 2f0e      	MOV  R16,R30
0004c3 2fa0      	MOV  R26,R16
0004c4 dc1e      	RCALL _SendDataBitsLCD
0004c5 e0a2      	LDI  R26,LOW(2)
0004c6 e0b0      	LDI  R27,0
0004c7 d18c      	RCALL _delay_ms
0004c8 cc17      	RJMP _PulseEn
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0004c9 d0de      	RCALL __SAVELOCR3
                +
0004ca 2f1a     +MOV R17 , R26
0004cb 2f2b     +MOV R18 , R27
                 	__PUTW2R 17,18
0004cc e000      	LDI  R16,LOW(0)
0004cd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
0004ce 2fe0      	MOV  R30,R16
0004cf 5f0f      	SUBI R16,-1
0004d0 e0f0      	LDI  R31,0
0004d1 0fe1      	ADD  R30,R17
0004d2 1ff2      	ADC  R31,R18
0004d3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
                +
0004d4 2fa1     +MOV R26 , R17
0004d5 2fb2     +MOV R27 , R18
                 	__GETW2R 17,18
0004d6 27ee      	CLR  R30
0004d7 0fa0      	ADD  R26,R16
0004d8 1fbe      	ADC  R27,R30
0004d9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x4:
0004da 91e0 0312 	LDS  R30,_i
0004dc e0f0      	LDI  R31,0
0004dd 5ce2      	SUBI R30,LOW(-_world)
0004de 4ffc      	SBCI R31,HIGH(-_world)
0004df 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:26 WORDS
                 SUBOPT_0x5:
0004e0 91e0 0312 	LDS  R30,_i
0004e2 5fef      	SUBI R30,-LOW(1)
0004e3 93e0 0312 	STS  _i,R30
0004e5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
                +
0004e6 ef84     +LDI R24 , LOW ( 500 )
0004e7 e091     +LDI R25 , HIGH ( 500 )
                +__DELAY_USW_LOOP :
0004e8 9701     +SBIW R24 , 1
0004e9 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 500
0004ea 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:32 WORDS
                 SUBOPT_0x7:
0004eb e0e1      	LDI  R30,LOW(1)
0004ec 93ea      	ST   -Y,R30
0004ed e0a1      	LDI  R26,LOW(1)
0004ee dc34      	RCALL _MoveCursor
0004ef e2a0      	LDI  R26,LOW(32)
0004f0 dc11      	RCALL _CharLCD
0004f1 e0e1      	LDI  R30,LOW(1)
0004f2 93ea      	ST   -Y,R30
0004f3 e0a0      	LDI  R26,LOW(0)
0004f4 dc2e      	RCALL _MoveCursor
0004f5 e0a0      	LDI  R26,LOW(0)
0004f6 dc0b      	RCALL _CharLCD
0004f7 e0e0      	LDI  R30,LOW(0)
                +
0004f8 93e0 033f+STS _world + ( 1 ) , R30
                 	__PUTB1MN _world,1
0004fa e2e0      	LDI  R30,LOW(32)
                +
0004fb 93e0 034f+STS _world + ( 17 ) , R30
                 	__PUTB1MN _world,17
0004fd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
0004fe 91a0 0316 	LDS  R26,_score
000500 91b0 0317 	LDS  R27,_score+1
000502 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
000503 dc1c      	RCALL _EraseLCD
000504 e0e0      	LDI  R30,LOW(0)
000505 93ea      	ST   -Y,R30
000506 e0a0      	LDI  R26,LOW(0)
000507 cc1b      	RJMP _MoveCursor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xA:
000508 e0e0      	LDI  R30,LOW(0)
000509 93ea      	ST   -Y,R30
00050a e0a1      	LDI  R26,LOW(1)
00050b cc17      	RJMP _MoveCursor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xB:
00050c dbf5      	RCALL _CharLCD
00050d e0a2      	LDI  R26,LOW(2)
00050e dbf3      	RCALL _CharLCD
00050f e0a2      	LDI  R26,LOW(2)
000510 dbf1      	RCALL _CharLCD
000511 e0a2      	LDI  R26,LOW(2)
000512 cbef      	RJMP _CharLCD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xC:
000513 e0a3      	LDI  R26,LOW(3)
000514 dbed      	RCALL _CharLCD
000515 e0a3      	LDI  R26,LOW(3)
000516 dbeb      	RCALL _CharLCD
000517 e0a3      	LDI  R26,LOW(3)
000518 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
000519 dbe8      	RCALL _CharLCD
00051a e0e0      	LDI  R30,LOW(0)
00051b 93e0 0312 	STS  _i,R30
00051d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
                +
00051e ed81     +LDI R24 , LOW ( 209 )
00051f e090     +LDI R25 , HIGH ( 209 )
                +__DELAY_USW_LOOP :
000520 9701     +SBIW R24 , 1
000521 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 209
000522 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0xF:
000523 e0e1      	LDI  R30,LOW(1)
000524 e0f0      	LDI  R31,HIGH(1)
000525 93e0 031a 	STS  _restart,R30
000527 93f0 031b 	STS  _restart+1,R31
000529 eba8      	LDI  R26,LOW(3000)
00052a e0bb      	LDI  R27,HIGH(3000)
00052b d128      	RCALL _delay_ms
00052c e0e0      	LDI  R30,LOW(0)
00052d 93e0 0316 	STS  _score,R30
00052f 93e0 0317 	STS  _score+1,R30
000531 cbee      	RJMP _EraseLCD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
000532 91e0 0314 	LDS  R30,_hs
000534 91f0 0315 	LDS  R31,_hs+1
000536 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x11:
000537 91e0 0316 	LDS  R30,_score
000539 91f0 0317 	LDS  R31,_score+1
00053b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
00053c e0e1      	LDI  R30,LOW(_Cadena)
00053d e0f3      	LDI  R31,HIGH(_Cadena)
00053e 93fa      	ST   -Y,R31
00053f 93ea      	ST   -Y,R30
000540 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x13:
000541 93fa      	ST   -Y,R31
000542 93ea      	ST   -Y,R30
000543 dff3      	RCALL SUBOPT_0x11
000544 2766      	CLR  R22
000545 2777      	CLR  R23
000546 d104      	RCALL __PUTPARD1
000547 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
000548 e0a1      	LDI  R26,LOW(_Cadena)
000549 e0b3      	LDI  R27,HIGH(_Cadena)
00054a dbcb      	RCALL _StringLCDVar
00054b e0e0      	LDI  R30,LOW(0)
00054c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
                +
00054d e98c     +LDI R24 , LOW ( 412 )
00054e e091     +LDI R25 , HIGH ( 412 )
                +__DELAY_USW_LOOP :
00054f 9701     +SBIW R24 , 1
000550 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 412
000551 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x16:
000552 91ed      	LD   R30,X+
000553 91fd      	LD   R31,X+
000554 9631      	ADIW R30,1
000555 93fe      	ST   -X,R31
000556 93ee      	ST   -X,R30
000557 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
000558 91a0 0318 	LDS  R26,_allow_jump
00055a 91b0 0319 	LDS  R27,_allow_jump+1
00055c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
                +
00055d e388     +LDI R24 , LOW ( 312 )
00055e e091     +LDI R25 , HIGH ( 312 )
                +__DELAY_USW_LOOP :
00055f 9701     +SBIW R24 , 1
000560 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 312
000561 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x19:
000562 933a      	ST   -Y,R19
000563 89aa      	LDD  R26,Y+18
000564 89bb      	LDD  R27,Y+18+1
000565 89ec      	LDD  R30,Y+20
000566 89fd      	LDD  R31,Y+20+1
000567 9509      	ICALL
000568 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x1A:
000569 89ed      	LDD  R30,Y+21
00056a 89fe      	LDD  R31,Y+21+1
00056b 9734      	SBIW R30,4
00056c 8bed      	STD  Y+21,R30
00056d 8bfe      	STD  Y+21+1,R31
00056e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1B:
00056f 89aa      	LDD  R26,Y+18
000570 89bb      	LDD  R27,Y+18+1
000571 89ec      	LDD  R30,Y+20
000572 89fd      	LDD  R31,Y+20+1
000573 9509      	ICALL
000574 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1C:
000575 89ad      	LDD  R26,Y+21
000576 89be      	LDD  R27,Y+21+1
000577 9614      	ADIW R26,4
000578 91ed      	LD   R30,X+
000579 91fd      	LD   R31,X+
00057a 83ee      	STD  Y+6,R30
00057b 83ff      	STD  Y+6+1,R31
00057c 81ae      	LDD  R26,Y+6
00057d 81bf      	LDD  R27,Y+6+1
00057e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1D:
                +
00057f 87e8     +STD Y + 8 , R30
000580 87f9     +STD Y + 8 + 1 , R31
000581 876a     +STD Y + 8 + 2 , R22
000582 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
000583 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
000584 89ad      	LDD  R26,Y+21
000585 89be      	LDD  R27,Y+21+1
000586 9614      	ADIW R26,4
000587 d0b9      	RCALL __GETW1P
000588 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1F:
                +
000589 87ec     +STD Y + 12 , R30
00058a 87fd     +STD Y + 12 + 1 , R31
00058b 876e     +STD Y + 12 + 2 , R22
00058c 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
00058d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x20:
                +
00058e 85e8     +LDD R30 , Y + 8
00058f 85f9     +LDD R31 , Y + 8 + 1
000590 856a     +LDD R22 , Y + 8 + 2
000591 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
                +
000592 85ac     +LDD R26 , Y + 12
000593 85bd     +LDD R27 , Y + 12 + 1
000594 858e     +LDD R24 , Y + 12 + 2
000595 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
000596 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x21:
                +
000597 85a8     +LDD R26 , Y + 8
000598 85b9     +LDD R27 , Y + 8 + 1
000599 858a     +LDD R24 , Y + 8 + 2
00059a 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
00059b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x22:
00059c 93e0 035e 	STS  __seed_G101,R30
00059e 93f0 035f 	STS  __seed_G101+1,R31
0005a0 9360 0360 	STS  __seed_G101+2,R22
0005a2 9370 0361 	STS  __seed_G101+3,R23
0005a4 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
0005a5 935a      	ST   -Y,R21
                 __SAVELOCR5:
0005a6 934a      	ST   -Y,R20
                 __SAVELOCR4:
0005a7 933a      	ST   -Y,R19
                 __SAVELOCR3:
0005a8 932a      	ST   -Y,R18
                 __SAVELOCR2:
0005a9 931a      	ST   -Y,R17
0005aa 930a      	ST   -Y,R16
0005ab 9508      	RET
                 
                 __LOADLOCR6:
0005ac 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0005ad 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0005ae 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0005af 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0005b0 8119      	LDD  R17,Y+1
0005b1 8108      	LD   R16,Y
0005b2 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
0005b3 93af      	PUSH R26
0005b4 93bf      	PUSH R27
0005b5 01db      	MOVW R26,R22
0005b6 0fac      	ADD  R26,R28
0005b7 1fbd      	ADC  R27,R29
                 __INITLOC0:
0005b8 9005      	LPM  R0,Z+
0005b9 920d      	ST   X+,R0
0005ba 958a      	DEC  R24
0005bb f7e1      	BRNE __INITLOC0
0005bc 91bf      	POP  R27
0005bd 91af      	POP  R26
0005be 9508      	RET
                 
                 __ADDW1R15:
0005bf 2400      	CLR  R0
0005c0 0def      	ADD  R30,R15
0005c1 1df0      	ADC  R31,R0
0005c2 9508      	RET
                 
                 __ADDW2R15:
0005c3 2400      	CLR  R0
0005c4 0daf      	ADD  R26,R15
0005c5 1db0      	ADC  R27,R0
0005c6 9508      	RET
                 
                 __ANEGW1:
0005c7 95f1      	NEG  R31
0005c8 95e1      	NEG  R30
0005c9 40f0      	SBCI R31,0
0005ca 9508      	RET
                 
                 __ANEGD1:
0005cb 95f0      	COM  R31
0005cc 9560      	COM  R22
0005cd 9570      	COM  R23
0005ce 95e1      	NEG  R30
0005cf 4fff      	SBCI R31,-1
0005d0 4f6f      	SBCI R22,-1
0005d1 4f7f      	SBCI R23,-1
0005d2 9508      	RET
                 
                 __CWD1:
0005d3 2f6f      	MOV  R22,R31
0005d4 0f66      	ADD  R22,R22
0005d5 0b66      	SBC  R22,R22
0005d6 2f76      	MOV  R23,R22
0005d7 9508      	RET
                 
                 __MULD12U:
0005d8 9f7a      	MUL  R23,R26
0005d9 2d70      	MOV  R23,R0
0005da 9f6b      	MUL  R22,R27
0005db 0d70      	ADD  R23,R0
0005dc 9ff8      	MUL  R31,R24
0005dd 0d70      	ADD  R23,R0
0005de 9fe9      	MUL  R30,R25
0005df 0d70      	ADD  R23,R0
0005e0 9f6a      	MUL  R22,R26
0005e1 2d60      	MOV  R22,R0
0005e2 0d71      	ADD  R23,R1
0005e3 9ffb      	MUL  R31,R27
0005e4 0d60      	ADD  R22,R0
0005e5 1d71      	ADC  R23,R1
0005e6 9fe8      	MUL  R30,R24
0005e7 0d60      	ADD  R22,R0
0005e8 1d71      	ADC  R23,R1
0005e9 2788      	CLR  R24
0005ea 9ffa      	MUL  R31,R26
0005eb 2df0      	MOV  R31,R0
0005ec 0d61      	ADD  R22,R1
0005ed 1f78      	ADC  R23,R24
0005ee 9feb      	MUL  R30,R27
0005ef 0df0      	ADD  R31,R0
0005f0 1d61      	ADC  R22,R1
0005f1 1f78      	ADC  R23,R24
0005f2 9fea      	MUL  R30,R26
0005f3 2de0      	MOV  R30,R0
0005f4 0df1      	ADD  R31,R1
0005f5 1f68      	ADC  R22,R24
0005f6 1f78      	ADC  R23,R24
0005f7 9508      	RET
                 
                 __DIVW21U:
0005f8 2400      	CLR  R0
0005f9 2411      	CLR  R1
0005fa e190      	LDI  R25,16
                 __DIVW21U1:
0005fb 0faa      	LSL  R26
0005fc 1fbb      	ROL  R27
0005fd 1c00      	ROL  R0
0005fe 1c11      	ROL  R1
0005ff 1a0e      	SUB  R0,R30
000600 0a1f      	SBC  R1,R31
000601 f418      	BRCC __DIVW21U2
000602 0e0e      	ADD  R0,R30
000603 1e1f      	ADC  R1,R31
000604 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000605 60a1      	SBR  R26,1
                 __DIVW21U3:
000606 959a      	DEC  R25
000607 f799      	BRNE __DIVW21U1
000608 01fd      	MOVW R30,R26
000609 01d0      	MOVW R26,R0
00060a 9508      	RET
                 
                 __DIVD21U:
00060b 933f      	PUSH R19
00060c 934f      	PUSH R20
00060d 935f      	PUSH R21
00060e 2400      	CLR  R0
00060f 2411      	CLR  R1
000610 01a0      	MOVW R20,R0
000611 e230      	LDI  R19,32
                 __DIVD21U1:
000612 0faa      	LSL  R26
000613 1fbb      	ROL  R27
000614 1f88      	ROL  R24
000615 1f99      	ROL  R25
000616 1c00      	ROL  R0
000617 1c11      	ROL  R1
000618 1f44      	ROL  R20
000619 1f55      	ROL  R21
00061a 1a0e      	SUB  R0,R30
00061b 0a1f      	SBC  R1,R31
00061c 0b46      	SBC  R20,R22
00061d 0b57      	SBC  R21,R23
00061e f428      	BRCC __DIVD21U2
00061f 0e0e      	ADD  R0,R30
000620 1e1f      	ADC  R1,R31
000621 1f46      	ADC  R20,R22
000622 1f57      	ADC  R21,R23
000623 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000624 60a1      	SBR  R26,1
                 __DIVD21U3:
000625 953a      	DEC  R19
000626 f759      	BRNE __DIVD21U1
000627 01fd      	MOVW R30,R26
000628 01bc      	MOVW R22,R24
000629 01d0      	MOVW R26,R0
00062a 01ca      	MOVW R24,R20
00062b 915f      	POP  R21
00062c 914f      	POP  R20
00062d 913f      	POP  R19
00062e 9508      	RET
                 
                 __MODW21:
00062f 94e8      	CLT
000630 ffb7      	SBRS R27,7
000631 c004      	RJMP __MODW211
000632 95b1      	NEG  R27
000633 95a1      	NEG  R26
000634 40b0      	SBCI R27,0
000635 9468      	SET
                 __MODW211:
000636 fdf7      	SBRC R31,7
000637 df8f      	RCALL __ANEGW1
000638 dfbf      	RCALL __DIVW21U
000639 01fd      	MOVW R30,R26
00063a f40e      	BRTC __MODW212
00063b df8b      	RCALL __ANEGW1
                 __MODW212:
00063c 9508      	RET
                 
                 __MODD21U:
00063d dfcd      	RCALL __DIVD21U
00063e 01fd      	MOVW R30,R26
00063f 01bc      	MOVW R22,R24
000640 9508      	RET
                 
                 __GETW1P:
000641 91ed      	LD   R30,X+
000642 91fc      	LD   R31,X
000643 9711      	SBIW R26,1
000644 9508      	RET
                 
                 __GETD1P:
000645 91ed      	LD   R30,X+
000646 91fd      	LD   R31,X+
000647 916d      	LD   R22,X+
000648 917c      	LD   R23,X
000649 9713      	SBIW R26,3
00064a 9508      	RET
                 
                 __PUTPARD1:
00064b 937a      	ST   -Y,R23
00064c 936a      	ST   -Y,R22
00064d 93fa      	ST   -Y,R31
00064e 93ea      	ST   -Y,R30
00064f 9508      	RET
                 
                 __CPD10:
000650 9730      	SBIW R30,0
000651 4060      	SBCI R22,0
000652 4070      	SBCI R23,0
000653 9508      	RET
                 
                 _delay_ms:
000654 9610      	adiw r26,0
000655 f039      	breq __delay_ms1
                 __delay_ms0:
000656 95a8      	wdr
                +
000657 ef8a     +LDI R24 , LOW ( 0xFA )
000658 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000659 9701     +SBIW R24 , 1
00065a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
00065b 9711      	sbiw r26,1
00065c f7c9      	brne __delay_ms0
                 __delay_ms1:
00065d 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  42 r1 :  15 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   5 
r16:  65 r17:  53 r18:  21 r19:  34 r20:  29 r21:  17 r22:  47 r23:  37 
r24:  37 r25:  15 r26: 205 r27:  61 r28:  21 r29:   2 r30: 289 r31: 105 
x  :  34 y  : 159 z  :  27 
Registers used: 22 out of 35 (62.9%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  18 add   :  20 
adiw  :  26 and   :   0 andi  :   8 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  19 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  44 brpl  :   1 brsh  :  17 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  23 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   3 
cp    :   3 cpc   :   9 cpi   :  60 cpse  :   0 dec   :   4 des   :   0 
eor   :   3 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   1 inc   :   0 jmp   :  29 ld    :  36 ldd   :  69 ldi   : 216 
lds   :  35 lpm   :  16 lsl   :   5 lsr   :   0 mov   :  45 movw  :  43 
mul   :  11 muls  :   0 mulsu :   0 neg   :   5 nop   :   0 or    :   2 
ori   :   6 out   :   7 pop   :   6 push  :   6 rcall : 190 ret   :  63 
reti  :   0 rjmp  :  98 rol   :  10 ror   :   0 sbc   :   5 sbci  :  15 
sbi   :  18 sbic  :   1 sbis  :   0 sbiw  :  28 sbr   :   2 sbrc  :   3 
sbrs  :  18 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  71 std   :  31 sts   :  37 sub   :   2 subi  :  29 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 61 out of 116 (52.6%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000cbc   3096    164   3260   32768   9.9%
[.dseg] 0x000100 0x000362      0     98     98    2048   4.8%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 2 warnings
